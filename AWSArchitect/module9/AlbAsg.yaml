AWSTemplateFormatVersion: 2010-09-09
Description:  Cafe webapp instance, and Lambda that creates custom AMI.

Parameters:
  MyLabRole:
    Type: String
    Default: 'arn:aws:iam::533267395270:role/LabRole'
    Description: ARN of the pre-created IAM LabRole


  MyLabRoleInstanceProfile:
    Type: String
    Default: 'arn:aws:iam::533267395270:instance-profile/LabInstanceProfile'
    Description: ARN of the pre-created IAM LabRole Instance Profile

  KeyName:
    Type: String
    Description: the keypair that Vocareum will use to launch EC2 instances
    Default: "default-lab-key"

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    
  
  VPC:
    Type: String
    Description: Enter the database pwd
    Default: 'vpc-0cd53eb42e7c7ab12'

  #Autoscaling Group parameters
  MinSize:
    Type: Number
    Description: Minimum number of instances in the Auto Scaling Group
    Default: 2
  MaxSize:
    Type: Number
    Description: Maximum number of instances in the Auto Scaling Group
    Default: 6
  DesiredCapacity:
    Type: Number
    Description: Desired number of instances in the Auto Scaling Group
    Default: 2

  YourIAMRole:
    Type: AWS::IAM::Role::Name
    Description: Name of the IAM role to be associated with the EC2 instances
    ConstraintDescription: must be the name of an existing IAM role.

  Resources:
  MyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !ImportValue GoldAMIARN
      InstanceType: t2.micro
      SecurityGroups:
        - !ImportValue CafeSG
      IamInstanceProfile: LabInstanceProfile  # Provide only the instance profile name here, without the ARN prefix
      Tag:
        - Key: Name
          Value: WebServer
          ResourceType: instancesces  

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfig
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1
        - !Ref PrivateSubnetID
      TargetGroupARNs:
        - !Ref MyTargetGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref YourVPCId
      HealthCheckPath: "/" # Example health check path
      HealthCheckProtocol: HTTP # Example health check protocol
      HealthCheckIntervalSeconds: 30 # Example health check interval
      HealthCheckTimeoutSeconds: 10 # Example health check timeout
      HealthyThresholdCount: 3 # Example healthy threshold count
      UnhealthyThresholdCount: 3 # Example unhealthy threshold count

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - !Ref YourSubnetID1
        - !Ref YourSubnetID2
      SecurityGroups:
        - !Ref YourSecurityGroupID
      Scheme: internet-facing # or internal, depending on your setup
      Tags:
        - Key: Name
          Value: MyLoadBalancer

  Outputs:
    LoadBalancerDNSName:
      Description: DNS name of the load balancer
      Value: !GetAtt MyLoadBalancer.DNSName
      Export:
        Name: !Sub "${AWS::StackName}-LoadBalancerDNS"
    
  