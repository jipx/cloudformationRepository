AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# DynamoDB Table
# Lambda execution roles
# Cognito Identity Pool + Roles

Resources:

###########
# DynamoDB Table
###########

  InventoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      AttributeDefinitions:
        - AttributeName: Store
          AttributeType: S
        - AttributeName: Item
          AttributeType: S
      KeySchema:
        - AttributeName: Store
          KeyType: HASH
        - AttributeName: Item
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

###########
# Lambda Role
###########

  LambdaLoadInventoryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Load-Inventory-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: CWLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                Effect: Allow

  LambdaCheckStockRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Check-Stock-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole

###########
# Cognito
###########

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: mxnetServerlessIdentity
      AllowUnauthenticatedIdentities: true

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated

  UnauthenticatedRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UseDynamoDB
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - dynamodb:*
            Resource:
              - '*'
      Roles:
        - !Ref UnauthenticatedRole

  IdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt
          - UnauthenticatedRole
          - Arn

###########
# awsstudent user & policy for Cloud9 in Vocareum
###########
  IAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: awsstudent

  IAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: IAMUser
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
            "Sid": "StudentPolicy",
            "Action": [
              "cloudformation:*",
              "cloud9:*",
              "dynamodb:List*",
              "dynamodb:Delete*",
              "dynamodb:Restore*",
              "dynamodb:Update*",
              "dynamodb:Create*",
              "dynamodb:Describe*",
              "dynamodb:TagResource",
              "dynamodb:Get*",
              "dynamodb:Batch*",
              "dynamodb:ConditionCheck*",
              "dynamodb:UntagResource",
              "dynamodb:PutItem",
              "dynamodb:Scan",
              "dynamodb:Query",
              "ec2:RunInstances",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:*Subnet*",
              "ec2:*Vpc*",
              "iam:Get*",
              "iam:List*",
              "iam:CreateServiceLinkedRole",
              "iam:PassRole",
              "kms:List*",
              "kms:Describe*",
              "logs:List*",
              "logs:Describe*",
              "logs:Get*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents",
              "lambda:*",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "datapipeline:Describe*",
              "datapipeline:Get*",
              "datapipeline:List*",
              "datapipeline:QueryObjects",
              "ssm:List*",
              "ssm:Describe*",
              "ssm:Get*",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation",
              "ssm:CancelCommand",
              "ssm:SendCommand",
              "ssm:StartAutomationExecution",
              "ssm:StartSession",
              "ssm:TerminateSession",
              "ssm:ResumeSession",
              "ssm:DescribeSessions",
              "ssm:GetConnectionStatus",
              "s3:Put*",
              "s3:Get*",
              "s3:Create*",
              "s3:Replicate*",
              "s3:Delete*",
              "s3:*Bucket*",
              "s3:List*",
              "s3:*Job*",
              "s3:ReplicateTags",
              "s3:RestoreObject",
              "s3:AbortMultipartUpload",
              "sns:*Tag*",
              "sns:*Topic*",
              "sns:*subscribe",
              "sns:Create*",
              "sns:*PhoneNumber*",
              "sns:List*",
              "sns:Set*",
              "sns:Publish",
              "sns:*PlatformApplication*",
              "sns:ConfirmSubscription",
              "sns:*Permission",
              "sns:Get*",
              "sns:DeleteEndpoint",
              "tag:*",
              "phd:*",
              "xray:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "ServiceLinkedRoleAndPolicies",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole",
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "iam:dynamodb": "dynamodb.amazonaws.com",
                "iam:lambda": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Sid": "RestrictActions",
            "Effect": "Deny",
            "Action": [
              "s3:*ObjectLegalHold",
              "s3:*ObjectRetention",
              "s3:*BucketObjectLock*"
            ],
              "Resource": "*"
          },
          {
              "Sid": "RestrictCloud9",
              "Effect": "Deny",
              "Action": [
                  "cloud9:CreateEnvironmentEC2",
                  "cloud9:UpdateEnvironment"
              ],
              "Resource": "*",
              "Condition": {
                  "ForAnyValue:StringNotLikeIfExists": {
                      "cloud9:InstanceType": [
                          "*.nano",
                          "*.micro",
                          "*.small"
                      ]
                  }
              }
          }
        ]
      ManagedPolicyName: lab_policy
      Users:
        - awsstudent

  IAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    DependsOn: IAMUser
    Properties:
      Status: Active
      UserName: awsstudent

Outputs:

  Dashboard:
    Description: Link to inventory dashboard
    Value: !Sub "https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-ACACAD-20-EN/mod13-guided/web/inventory.htm?region=${AWS::Region}&poolId=${IdentityPool}"

  IdentityPoolId:
    Value: !Ref IdentityPool
    Description: IdentityPool ID

  AccessKey:
    Value:
      Ref: IAMUserAccessKey

  SecretKey:
    Value:
      'Fn::GetAtt':
        - IAMUserAccessKey
        - SecretAccessKey
